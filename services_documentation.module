<?php

/**
 * @file
 * services_documentation.module
 *
 * Generates documentation pages for Services resources.
 */

/**
 * Implements hook_menu().
 */
function services_documentation_menu() {
  $base_path = variable_get('services_documentation_base_path', 'developers');

  // API versions overview.
  $endpoints = services_endpoint_load_all();
  $items[$base_path] = array(
    'title' => 'Services Documentation: API Versions',
    'page callback' => 'services_documentation_versions_overview_page',
    'page arguments' => array($endpoints),
    'access arguments' => array('view services documentation'),
    'file' => 'services_documentation.pages.inc',
  );

  // Build menu items for each API version.
  foreach ($endpoints as $endpoint_id => $endpoint) {
    $endpoint_path = $base_path . '/' . $endpoint_id;
    $items[$endpoint_path] = array(
      'title' => 'Version ' . $endpoint->name,
      'page callback' => 'services_documentation_version_page',
      'access arguments' => array('view services documentation'),
      'page arguments' => array($endpoint),
      'file' => 'services_documentation.pages.inc',
    );
  }

  // Provide an administration page for configuring homepage content.
  $items['admin/config/services/documentation'] = array(
    'title' => 'Services Documentation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('services_documentation_configure'),
    'access arguments' => array('administer site configuration'),
    'file' => 'services_documentation.admin.inc',
    'description' => "Configure API documentation.",
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function services_documentation_permission() {
  return array(
    'view services documentation' => array(
      'title' => t('view services documentation'),
      'description' => t('View services documentation.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function services_documentation_theme($existing, $type, $theme, $path) {
  $theme_path = drupal_get_path('module', 'services_documentation') . '/theme';

  return array(
    'services_documentation_versions_overview' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-versions-overview',
      'variables' => array('versions' => NULL),
    ),
    'services_documentation_version' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-version',
      'variables' => array(
        'table_of_contents' => NULL,
        'description' => NULL,
        'resources' => NULL,
      ),
    ),
    'services_documentation_resource' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-resource',
      'variables' => array(
        'name' => NULL,
        'description' => NULL,
        'limit' => NULL,
        'method_bundles' => NULL,
      ),
    ),
    'services_documentation_method_bundle' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-method-bundle',
      'variables' => array(
        'name' => NULL,
        'methods' => NULL,
      ),
    ),
    'services_documentation_method' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-method',
      'variables' => array(
        'name' => NULL,
        'path' => NULL,
        'weight' => NULL,
        'verb' => NULL,
        'description' => NULL,
        'parameters' => NULL,
        'request_url' => NULL,
        'request_data' => NULL,
        'response' => NULL,
        'example_implementations_bundles' => NULL,
        'method' => NULL,
        'auth' => FALSE,
      ),
    ),
    'services_documentation_implementation_bundle' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-implementation-bundle',
      'variables' => array(
        'language' => NULL,
        'examples' => NULL,
      ),
    ),
    'services_documentation_implementation' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-implementation',
      'variables' => array(
        'name' => NULL,
        'description' => NULL,
        'location' => NULL,
        'files' => NULL,
        'download_link' => NULL,
        'uses_sdk' => NULL,
      ),
    ),
    'services_documentation_implementation_file' => array(
      'path' => $theme_path,
      'template' => 'services-documentation-implementation-file',
      'variables' => array(
        'name' => NULL,
        'path' => NULL,
        'type' => NULL,
        'contents' => NULL,
        'children' => NULL,
      ),
    ),
  );
}

/**
 * Preprocesses variables for services_documentation_method_bundle template.
 */
function template_preprocess_services_documentation_method_bundle(&$vars) {
  // Implement admin setting for hiding method bundle title.
  if (!variable_get('services_documentation_display_bundle_title', FALSE)) {
    unset($vars['name']);
  }
}

/**
 * Implements hook_element_info().
 */
function services_documentation_element_info() {
  $types['services_documentation_method'] = array(
    '#input' => FALSE,
    '#pre_render' => array('services_documentation_format_method'),
    '#theme' => array('services_documentation_method'),
  );
  return $types;
}

/**
 * Formats documented Services methods.
 */
function services_documentation_format_method($element) {

  $element['url'] = array();

  // Create HTTP method key.
  foreach ($element['#method']['args'] as $key => $argument) {
    if (is_array($argument['source'])) {
      switch (key($argument['source'])) {
        case 'param':
          $element['#method']['args'][$key]['http_method'] = t('GET');
          break;

        case 'path':
          $element['#method']['args'][$key]['http_method'] = t('URL');
          $element['url'][$argument['source']['path']] = '[' . $argument['name'] . ']';
          break;
      }
    }
    else {
      $element['#method']['args'][$key]['http_method'] = t('POST');
    }
  }
  $element['url'] = $element['#name'] . '/' . implode('/', $element['url']);


  if (!empty($element['#request_url']) && valid_url($element['#request_url'])) {
    $element['#request_url'] = l(check_plain($element['#request_url']), $element['#request_url'], array('html' => TRUE));
  }

  return $element;
}
